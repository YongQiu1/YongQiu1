 alert('消息') ;可以用来显示消息。
当存在换行符的时候大多数情况可以省略“；”
注意是大多数不是总是，尽可能不要省略分号
例如：
alert(3+
1
+2);
代码将会输出“6”

添加注释：你可以在任何代码后添加注释来描述它的作用
单行注释以两个正斜杠字符“//”开始  如：
// 这行注释独占一行
alert('Hello');

alert('World'); // 这行注释跟随在语句后面
浏览器会自动忽略双斜杠后的内容
多行注释以正斜杠和星号“/*”开始以“*/”结尾  如：
/* 两个消息的例子。
这是一个多行注释。
*/
alert('Hello');
alert('World');
这个方式有时能让我们方便的禁用部分代码  如：
/* 注释代码
alert('Hello');
*/
在大多数的编辑器中，一行代码可以使用 
Ctrl+/ 热键进行单行注释，
诸如 Ctrl+Shift+/ 的热键可以进行多行注释
（选择代码，然后按下热键）。

在脚本最开始添加"use strict";让整个JavaScript变成现代模式

使用let创造一个变量 如：
let message;
//声明了一个名为message的变量
可以为变量添加数据 如：
message='hello';
alert（message）;//显示变量内容
也可以将变量声明和赋值合并 如：
let message='hello';
也可以一次性声明多个变量 如：
let user='john',age=25,message='hello';
多行声明相对麻烦单容易阅读
你也可以：
let user = 'John',
  age = 25,
  message = 'Hello';
你可以在老版本中见到“var”这个关键字
它和“let”的效果大体相同
一共变量只能声明一次，不然会报错

变量的命名：
JavaScript 的变量命名有两个限制：
1、变量名称必须仅包含字母，数字，符号 $ 和 _。
2、首字符必须非数字。
命名会区分大小写 apple和AppLE是不同的两个变量。
有一张 保留字列表，这张表中的保留字无法用作变量命名
，因为它们被用于编程语言本身了

常量
声明一个常数（不变）变量，可以使用 const 而非 let：
比如：const myBirthday = '18.04.1982';
作为常量，他们不能被修改，当你尝试修改就会报错
一般可以用于记住已知的但难以记住的值
比如16进制的颜色：const COLOR_RED = "#F00";

总结：
我们可以使用 var、let 或 const 声明变量来存储数据。

let — 现代的变量声明方式。
var — 老旧的变量声明方式。一般情况下，我们不会再使用它。
const — 类似于 let，但是变量的值无法被修改。
变量应当以一种容易理解变量内部是什么的方式进行命名。

数据类型
在JavaScript中一共有8种数据类型 分别为：
1、number类型：表示整数和浮点数，
无法表示大于 (2^53-1)或小于-（2^53-1）
（infinity=无穷大 NaN=计算错误）
2、Biglnt类型：用于表示任意长度的整数。
在整数字段末尾附加n创建BigInt值 如：
const bigInt = 1234567890123456789012345678901234567890n;
3、String类型：在 JavaScript 中，有三种包含字符串的方式。
     3.1、双引号："Hello".
     3.2、单引号：'Hello'.
     3.3、反引号：`Hello`.
双单引号都是简单引用，几乎没有什么差别
反引号是功能扩展引号，它允许把变量和表达式放入${…}中 如：
alert( `Hello, ${name}!` );// Hello，John
${…}会被计算，变成字符串的一部分
但是！这只在反引号内有效，其他引号不允许这种嵌入
4、Boolean类型：这种类型仅包含“true”和“false”
通常用于储存表示yes或no的值
可以用于设置一个变量是否正确 如：
let nameFieldChecked = true;
也可以作为比较的结果
let isGreater = 4 > 1;
alert(isGreater);//true
5、null值：它是一个独立的类型，只包含null值
代表“无”、“空”或者“值未知”的特殊值
如：let age = null;//代表age是未知的
6、undefined值：和null一样自成类型
含义是未被赋值 如：
let age;
alert（age）;//弹出undefined
age这个变量被声明但没赋值，那它值就是undefined
7、object类型和symbol类型：
object类型：用于更复杂的数据结构
symbol类型：创建对象的唯一标识符
8、typeof运算符：我们可以通过 typeof 运算符查看存储在变量中的数据类型。

交互（显示模态窗口）
alert：跳出窗口显示文本
prompt函数：接收2个参数
result = prompt(title, [default]);
title：显示给用户的文本
default：可选的第二个参数，指定input框的初始值
语法中的方括号 [...]
方括号代表内容是可选的，不是必须的
先用let设置一个变量prompt值为('问题',用户输入);
然后在别的代码中输入此变量，输出值将是用户输入的内容
confirm函数是一个带有question以及确定或取消的窗口
result=confirm(question)；

类型转换
1、字符串转换
可以用alert(typeof 变量);检测一个变量是什么类型
可以用 变量=类型名(同个变量); 来变更变量的类型
2、数字型转换
   2.1、alert( "6" / "2" ); 运行如此一个算式时
string类型会自动转换为number进行计算
   2.2、显式转换 ：如
let str = "123";
alert(typeof str); // string

let num = Number(str); // 变成 number 类型 123

alert(typeof num); // number
但是当转换的字符串不是一个有效的数字时
如：let age=Number("abc")
alert(age);//NaN 转换失败
   2.3、number转换规则
undefined变成NaN
null变成0
true和false变成1和0
string如上所示
3、布尔型转换
转换规则：
直观上为“空”的值（如 0、空字符串、null、undefined 和 NaN）将变为 false。
其他值变成 true。
如
alert( Boolean(1) ); // true
alert( Boolean(0) ); // false

alert( Boolean("hello") ); // true
alert( Boolean("") ); // false
但是！包含0的字符串也是true！
如：
alert( Boolean("0") );// true
alert( Boolean(" ") ); // 空白，也是 true

基础运算符，数学：
1、运算远（参数）——运算符应用的对象
有多少给运算元就是几元运算符
一元负号运算符：let x=1；x=-x；alert(x);//-1
2、支持以下数学运算
加法+
减法-
乘法*
除法/
取余%：
不是百分数！a%b是求余数
如：alert(5%2);//值为1
求幂**
a**b会将b作为a的次幂计算
如：alert(2**4);//值为2的4次方16
也适用于非整数，平方根是数的1/2的幂计算
如：alert(4**(1/2));//值为2
3、用二元运算符+连接字符串
如：let s=“yo”+“ur”;
alert(s);//your
如果只有其中一个运算元是字符串那另一个也会转化为字符串
如：alert('1'+2);//"12"
特殊情况：alert（2+2+'1'）;//"41"而不是"221"
运算符将会以顺序工作，
这里会先计算2+2然后才加入‘1’得到"41"
alert('1'+2+2);//"122"，不是"14"
注意！"+"是唯一对字符串有作用的运算符
其他运算符只对数字起作用！

数字转化，一元运算符+
加号+有2种形式，一种是上面的二元运算符，一种是一元运算符
加号+应用于单个值没有任何作用。
但如果运算元不是数字，+则会将其转化为数字
如:alert(+"");//0
你甚至可以：
let a="2"；
let b="3"；
alert(+a++b);//5

赋值=返回一个值
let a=1；
let b=2；
let c=3-(a=b+1)；
alert(a);//3
alert(c);//0
由于=的优先级很低，所以会优先计算b+1，
然后将值赋予a

链式赋值
let a，b，c；
a=b=c=2+2；
这样abc的值都将会是4

原地修改
我们经常需要对一个变量做运算，
并将新的结果存储在同一个变量中。
可以使用+=和*=来缩写
如：let n=2；
n+=5；//现在n=7
n*=2；//现在n=14
当然/=和-=等都是可用的
这类运算符和=赋值运算符优先级相同，
所以他们在大多数计算后执行 
如：let n=2；
n*=3+5；
alert（n）；//16，3+5会优先计算

自增/自减
自增++将变量与1相加
counter++；
自减--将变量与1相减
counter--；
自增/自减只能应用于变量！用于数值将会报错！
++和--可以置于变量前也可以至于变量后
但是前置形式返回一个新的值，但后置返回原来的值
let counter = 1;
let a = ++counter; // (*)

alert(a); // 2

let counter = 1;
let a = counter++; // (*) 将 ++counter 改为 counter++

alert(a); // 1

位运算符：
按位与 ( & )
按位或 ( | )
按位异或 ( ^ )
按位非 ( ~ )
左移 ( << )
右移 ( >> )
无符号右移 ( >>> )

逗号运算符：是最少见最不常用的运算符之一
它能让我们处理多个语句但只有最后的语句的结果会返回
如：let a=(1+2,3+4);
alert(a);//7；
【逗号运算符的优先级比=还要低，
所以上面的括号非常重要，
不然就会变成a=3,7然后=执行a=3之后逗号
后面的数值7就不会在执行了，它被忽略掉了】
主要用于进行单行的复杂计算
如：for(a=1,b=2,c=a*b;a<10;a++)

值的比较
1、大于 / 小于：a > b，a < b。
大于等于 / 小于等于：a >= b，a <= b。
检查两个值的相等：a == b，请注意双等号 == 表示相等性检查，而单等号 a = b 表示赋值。
检查两个值不相等：不相等在数学中的符号是 ≠，但在 JavaScript 中写成 a != b。

比较后的数据结果为Boolean类型true/false
可以赋值给任意变量 let result=5>4
2、字符串比较
按照字典或词典顺序进行判定
从第一个字符开始比较直到一方比另一方大
若同时用完，则判定相等，否则未结束的一方大
3、不同类型之间的比较
alert（'2'>1);//true '2'会转化为数字2
alert('01'==1);//true'01'会转化为数字1
但是如果我们要区分0和false时
严格相等运算符 === 在进行比较时不会做任何的类型转换。
严格不相等为！==
4、对null和undefined比较
当===时结果为false
当==时结果为true
null转化为0
undefined转化为NaN
null>0//false
null==0//false
null>=0//true
而undefined不应该与任何值比较

条件分支
1、可以使用if语句和条件运算符？来实现
if（...)：计算括号里的条件表达式如果计算结
果是true，就会执行对应的代码块。
let year=prompt（'a','');
if (year=1) alert('You are right!');
如果有多个语句要进行，可以将语句封装在{}内
2、布尔转换：if会计算括号内的表达式并且将
类型转换为布尔型，当括号内的内容为假值时，
代码永远不会执行。如：if(0)
始终有效是：if(1)
也可以将预先计算的布尔值直接输入if
如：let cond=(year==1);
if(cond){};
3、else语句：若判断条件不成立，则会执行else
内部的代码。
4、多个条件else if：有时需要测试的条件有多种变体
可以使用else if字句来实现（只能用于if后）
5、条件运算符？：有时我们需要根据一个条件去赋值一个变量
let a = (age > 18) ? true : false;
//设置一个变量a，判断条件（age>18)返回结果，真为true，假为false
可以在false处再次输入整条语句，以此返回取决于多个条件的值。
6、？的非常规使用：有时可以用？来代替if语句
但最好不要这样做，这样会使语句可读性变差。

逻辑运算符
JavaScript 中有四个逻辑运算符：||（或），&&（与），!（非），??（空值合并运算符）
1、||（或）：result=true||false
除了2边都是false的情况下，剩下结果都是true
大多数情况下会用于if语句中：
let hour = 9;
let isWeekend = true;

if (hour < 10 || hour > 18|| isWeekend) {
  alert( 'The office is closed.' );
}
   1.1、||会按照从左往右的顺序计算，直到出现第一个真值或者全部运算完为止。
   1.2、短路求值：true || alert("not printed");和false || alert("printed");这两条命令只有第二条会执行
2、&&（与）：result=a&&b与（或）相反
除了两边都是true的情况，剩下结果都是false
用法：let hour = 12;
let minute = 30;

if (hour == 12 && minute == 30) {
  alert( 'Time is 12:30' );
}
   2.1、从左往右计算，直到出现第一个假值，若全是真值，最后一个值会被返回。
   2.2、&&的优先级高于||
3、！（非）：result=！value；
返回相反的值，有时可以用！！来将某个值转化为布尔类型

空值合并运算符？？
将不是null也不是undefined的表达式成为已定义的defined
a??b的结果是
如果 a 是已定义的，则结果为 a，
如果 a 不是已定义的，则结果为 b。
let user;

alert(user ?? "匿名"); // 匿名（user 未定义）
可以用多个??来选择出第一个非null/undefined的值
当然||也可以在起到部分相同的效果
它们之间重要的区别是：
|| 返回第一个 真 值。
?? 返回第一个 已定义的 值。
他们2个的优先级都为4，如果需要用??进行取值，需要考虑加上括号

出于安全原因，JavaScript 禁止将 ?? 运算符与 && 和 || 运算符一起使用，除非使用括号明确指定了优先级。
let x = 1 && 2 ?? 3; // 语法 error

循环 while和for：重复执行操作，使用相同的代码将1到10逐个输出
let i = 0;
while (i < 3) { // 依次显示 0、1 和 2
  alert( i );
  i++;
}
当while后括号内容为假时停止循环
while (i != 0) 可简写为 while (i)

do...while循环，使用可以将条件检查移至循环体下方
do {
  // 循环体
} while (condition);
优先运行一次循环体，然后检查条件。

for循环：
for (begin; condition; step) {
  // ……循环体……
}
begin	let i = 0	进入循环时执行一次。
condition	i < 3	在每次循环迭代之前检查，如果为 false，停止循环。
body（循环体）	alert(i)	条件为真时，重复运行。
step	i++	在每次循环体迭代后执行。

省略语句段：for循环的任何语句段都可以被省略。
请注意 for 的两个 ; 必须存在，否则会出现语法错误。

跳出循环：
我们随时可以使用break指令强制退出
举例一种if (!value) break;
继续下一次迭代：
continue，不会停止整个循环，而是停止这一次迭代，并强制启动新一轮循环
for (let i = 0; i < 10; i++) {

  //如果为真，跳过循环体的剩余部分。
  if (i % 2 == 0) continue;

  alert(i); // 1，然后 3，5，7，9
}
只输出奇数的代码
禁止 break/continue 在 ‘?’ 的右边

break/continue标签
标签是循环之前带有冒号的标识符
labelName: for (...) {
  ...
}
使用break 标签名 语句跳出循环至标签处
标签不允许我们跳到任意位置，break指令必须在被标记的代码块内才能起效，continue只有在循环内部才可行。

我们学习了三种循环：
while —— 每次迭代之前都要检查条件。
do..while —— 每次迭代后都要检查条件。
for (;;) —— 每次迭代之前都要检查条件，可以使用其他设置。

switch语句：
可以代替多个if判断，为多分支的情况提供了一个更具体描述性的方式
switch至少有一个case代码块和一个可选的default代码块
switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ...
    [break]
}
比较x值与第一个case的内容是否严格相等，然后比较第二个......
如果相等，执行case下的代码块，直到执行break或到switch语句结尾
如果没有符合的case，则执行default。
如果没有break，程序将不经过任何检查就继续执行下一个case。

case分组：
case 3: // (*) 下面这两个 case 被分在一组
  case 5:
    alert('Wrong!');
    break;

类型很关键：这里的相等是严格相等，数据相等但类型不同也是不等的。

函数：
1、函数声明
function showMessage() {
  alert( 'Hello everyone!' );
}
关键字 函数名（参数列表）{
body
}
然后可以通过名称调用showMessage（）
2、局部变量：
在函数中声明的变量只在函数内部可见。
function showMessage() {
  let message = "Hello, I'm JavaScript!"; // 局部变量

  alert( message );
}

showMessage(); // Hello, I'm JavaScript!

alert( message ); // <-- 错误！变量是函数的局部变量
3、外部变量
   3.1在外部定义变量后，通过各种方式加入函数运算中。
函数对外部变量拥有全部的访问权限。函数也可以修改外部变量。
比如：let userName = 'John';
在函数内部添加userName="Bob";
运行函数后，变量会改变。
   3.2函数内部声明局部变量，函数会屏蔽外部变量。直接使用局部变量的值。
4、参数：
function showMessage(from, text) {

  from = '*' + from + '*'; // 让 "from" 看起来更优雅

  alert( from + ': ' + text );
}

let from = "Ann";

showMessage(from, "Hello"); // *Ann*: Hello

// "from" 值相同，函数修改了一个局部的副本。
alert( from ); // Ann
参数（parameter）是函数声明中括号内列出的变量（它是函数声明时的术语）。
参数（argument）是调用函数时传递给函数的值（它是函数调用时的术语）。
5、默认值：
一个函数被调用，但是参数未被提供，相应的值会变成undefined。
上一个参数代码中的参数text的值未被传递，所以变成了undefined
function showMessage(from, text = "no text given") {
  alert( from + ": " + text );
}
showMessage("Ann"); // Ann: no text given
现在如果text参数未被传递，他将会得到值“no text given”
6、后备的默认参数
我们可以通过if (text === undefined)检查参数是否被传递进来
或者text = text || 'empty';
function showCount(count) {
  // 如果 count 为 undefined 或 null，则提示 "unknown"
  alert(count ?? "unknown");
}
7、返回值
函数可以将一个值返回到代码中作为结果
function sum(a, b) {
  return a + b;
}

let result = sum(1, 2);
alert( result ); // 3
指令 return 可以在函数的任意位置。当执行到达时，函数停止，并将值返回给调用代码（分配给上述代码中的 result）。
空值的return或没有return的返回值为undefined
不要在return和返回值之间添加新行
8、函数命名
函数就是行为（action）。所以它们的名字通常是动词。它应该简短且尽可能准确地描述函数的作用。这样读代码的人就能清楚地知道这个函数的功能。
9、函数注释
函数应该简短且只有一个功能，若太过复杂，那么将一个大函数拆成好几个小函数是值得的。
我们通过函数名（isPrime）就可以看出函数的行为，而不需要通过代码。人们通常把这样的代码称为 自描述。

函数表达式：
1、不同于函数声明的另一种创建函数的语法。
   1.1、函数声明的语法
function sayHi() {
  alert( "Hello" );
}
   1.2函数表达式的语法，他允许我们在任何一个表达式的中间创建函数
let sayHi = function() {
  alert( "Hello" );
};
sayHi得到了一个值，新函数function（）{...}
注意：函数表达式结尾有分号；而函数声明没有
function后没有函数名，函数表达式允许省略函数名
2、函数是一个值
function sayHi() {
  alert( "Hello" );
}

alert( sayHi ); // 显示函数代码，添加括号才能运行函数
3、回调函数
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

function showOk() {
  alert( "You agreed." );
}

function showCancel() {
  alert( "You canceled the execution." );
}

// 用法：函数 showOk 和 showCancel 被作为参数传入到 ask
ask("Do you agree?", showOk, showCancel);
以上代码块中showOk是yes的回调函数，showCancel是no的回调函数。
也可以使用函数表达式进行下面三个代码块的简写。
ask(
  "Do you agree?",
  function() { alert("You agreed."); },
  function() { alert("You canceled the execution."); }
);
之间在ask(...)中进行函数的声明，这两个无名函数被称为匿名函数。
4、函数表达式 vs 函数声明
   4.1、函数声明：在主代码流中声明为单独的语句的函数。
function sum(a, b) {
  return a + b;
}
   4.2、函数表达式：在一个表达式中或另一个语法结构中创建的函数。下面这个函数是在赋值表达式 = 右侧创建的：
let sum = function(a, b) {
  return a + b;
};
更细微的差别是，JavaScript 引擎会在 什么时候 创建函数。

1.在函数声明被定义之前，它就可以被调用。
sayHi("John"); // Hello, John

function sayHi(name) {
  alert( `Hello, ${name}` );
}
2.函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用。
sayHi("John"); // error!

let sayHi = function(name) {  // (*) no magic any more
  alert( `Hello, ${name}` );
};
3、严格模式下，当一个函数声明在一个代码块内时，它在该代码块内的任何位置都是可见的。但在代码块外不可见。
比如在if中声明了一个函数，在if外函数无法工作。
但是，如果使用函数表达式，被声明的函数在if外也能使用。

箭头函数，基础知识
创建函数的另一种语法。
let func = (arg1, arg2, ..., argN) => expression;
这里创建了一个函数 func，它接受参数 arg1..argN，然后使用参数对右侧的 expression 求值并返回其结果。
let func = function(arg1, arg2, ..., argN) {
  return expression;
};
是上方代码的简短版本
箭头右方放需要执行的表达式，以返回计算结果

多行的箭头函数
let sum = (a, b) => {  // 花括号表示开始一个多行函数
  let result = a + b;
  return result; // 如果我们使用了花括号，那么我们需要一个显式的 “return”
};

alert( sum(1, 2) ); // 3









